#!/usr/bin/env bash

# Check for correct usage
if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    echo "Usage: $0 <symlink_location> [actual_location]"
    exit 1
fi

# Required argument (symlink location)
SYMLINK_LOCATION="$1"

# Optional actual location (default to ~/.dotfiles/<symlink_location>)
if [ -n "$2" ]; then
    ACTUAL_LOCATION="$2"
else
    ACTUAL_LOCATION="$HOME/.dotfiles/$(basename "$SYMLINK_LOCATION")"
fi

# Define the mapping file (relative paths)
MAPPING_FILE="$HOME/.symlink_log"

# Ensure the actual location exists
if [ ! -e "$ACTUAL_LOCATION" ]; then
    echo "Error: '$ACTUAL_LOCATION' does not exist."
    exit 1
fi

# Ensure the symlink location's parent directory exists
SYMLINK_PARENT_DIR=$(dirname "$SYMLINK_LOCATION")
if [ ! -d "$SYMLINK_PARENT_DIR" ]; then
    mkdir -p "$SYMLINK_PARENT_DIR"
fi

# Create the symlink pointing to the actual location
ln -sf "$ACTUAL_LOCATION" "$SYMLINK_LOCATION"

# Append the relative mapping to the mapping file
RELATIVE_SYMLINK="${SYMLINK_LOCATION/#$HOME/~}"
RELATIVE_ACTUAL="${ACTUAL_LOCATION/#$HOME/~}"

ESCAPED_SYMLINK=$(printf '%s' "$RELATIVE_SYMLINK" | sed 's/[\/&]/\\&/g')

# Update the log: Remove any existing entry for the same symlink
if grep -q "^$RELATIVE_SYMLINK ->" "$MAPPING_FILE" 2>/dev/null; then
    # Remove the existing entry
    sed -i '' "/^$ESCAPED_SYMLINK ->/d" "$(readlink "$MAPPING_FILE")"
fi

echo "$RELATIVE_SYMLINK -> $RELATIVE_ACTUAL" >> "$MAPPING_FILE"
